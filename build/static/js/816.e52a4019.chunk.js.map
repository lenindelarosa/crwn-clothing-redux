{"version":3,"file":"static/js/816.e52a4019.chunk.js","mappings":"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","sources":["components/button/button.component.jsx","components/button/button.styles.jsx","components/form-input/form-input.styles.jsx","components/form-input/form-input.component.jsx","components/sign-up-form/sign-up-form.styles.jsx","components/sign-up-form/sign-up-form.component.jsx","components/sign-in-form/sign-in-form.styles.jsx","components/sign-in-form/sign-in-form.component.jsx","routes/authentication/authentication.styles.jsx","routes/authentication/authentication.component.jsx","store/user/user.selector.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import { BaseButton, GoogleSignInButton, InvertedButton, ButtonSpinner} from './button.styles'\n\nexport const BUTTON_TYPE_CLASSES = {\n    base: 'base',\n    google: 'google-sign-in',\n    inverted: 'inverted'\n};\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base) => (\n    {\n        [BUTTON_TYPE_CLASSES.base]: BaseButton,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedButton\n    }[buttonType]\n)\n\n\nconst Button = ({ children, buttonType, isLoading, ...otherProps }) => {\n    const CustomButton = getButton(buttonType);\n    return (\n        <CustomButton disabled={isLoading}{...otherProps} >\n            {isLoading ? <ButtonSpinner/> : children}\n        </CustomButton>\n    )\n};\n\nexport default Button;","import styled from 'styled-components';\nimport { SpinnerContainer } from '../spinner/spinner.styles';\n\nexport const BaseButton = styled.button`\n  //min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Open Sans Condensed';\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;      \n  align-items: center;\n  \n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }  \n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  }  \n`;\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 30px;\n  height: 30px;\n`","import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};\n`;\n\nexport const FormInputLabel = styled.label`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n  ${({ shrink }) => shrink && shrinkLabelStyles};\n`;\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n  &:focus {\n    outline: none;\n  }\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles};\n  }\n`;\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 45px 0;\n  input[type='password'] {\n    letter-spacing: 0.3em;\n  }\n`;","import { FormInputLabel, Input, Group } from './form-input.styles'\n\nconst FormInput = ({ label, groupStyle, ...otherProps }) => {\n    return (\n        <Group style={groupStyle}>\n            <Input {...otherProps}/>\n            {label && (\n                <FormInputLabel shrink={otherProps.value.length}>\n                    {label}\n                </FormInputLabel>\n            )}\n        </Group> \n    );\n};\n\nexport default FormInput;","import styled from 'styled-components';\n\nexport const SignUpContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n    width: 30vw;\n    \n    @media only screen \n    and (min-device-width : 200px) \n    and (max-device-width : 780px) {\n      width: 90%;\n    }\n\n    h2 {\n        margin: 10px 0;\n        font-size: min(max(20px, 2.5vw), 36px);\n    }\n\n    span {\n        font-size: min(max(14px, 2vw), 22px);\n    }\n`;","import { useState } from \"react\";\nimport FormInput from \"../form-input/form-input.component\";\nimport { SignUpContainer } from './sign-up-form.styles.jsx'\nimport Button, { BUTTON_TYPE_CLASSES } from \"../button/button.component\";\nimport { signUpStart } from \"../../store/user/user.action\";\nimport { useDispatch } from 'react-redux'\n\nconst defaultFormFields = {\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n}\n\nconst SignUpForm = () => {\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { displayName, email, password, confirmPassword } = formFields;\n    const dispatch = useDispatch();\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    }\n\n    const handleSubmit = async(event) => {\n        event.preventDefault();\n        if(password!==confirmPassword) {\n            alert('Passwords do not match! Please try again.')\n            return;\n        }\n        try {\n            dispatch(signUpStart(email, password, displayName));\n            resetFormFields();\n        }\n        catch(error){\n            console.log('Error in signing up user.');\n        }\n    }\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormFields({ ...formFields, [name]: value});\n    }\n    return (\n        <SignUpContainer>\n            <h2>Don't have an account?</h2>\n            <span>\n                Sign up with your email and password.\n            </span>\n            <form onSubmit={handleSubmit}>\n                <FormInput label=\"Display Name\" type=\"text\" onChange={handleChange} name=\"displayName\" value={displayName}/>\n\n                <FormInput label=\"Email\" type=\"email\" required onChange={handleChange} name=\"email\" value={email}/>\n\n                <FormInput label=\"Password\" type=\"password\" required onChange={handleChange} name=\"password\" value={password}/>\n\n                <FormInput label=\"Confirm Password\" type=\"password\" required onChange={handleChange} name=\"confirmPassword\" value={confirmPassword}/>\n\n                <Button type=\"submit\" buttonType={BUTTON_TYPE_CLASSES.base}>Sign Up</Button>\n            </form>\n        </SignUpContainer>\n    )\n};\n\nexport default SignUpForm;","import styled from 'styled-components';\n\nexport const SignInContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-right: 10px;\n    width: 30vw;\n\n    @media only screen \n    and (min-device-width : 200px) \n    and (max-device-width : 780px) {\n      width: 90%;\n    }\n\n    h2 {\n        margin: 10px 0;   \n        font-size: min(max(20px, 2.5vw), 36px);\n    }\n\n    span {\n        font-size: min(max(14px, 2vw), 22px);\n    }\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: grid;\n  grid-template-columns: 40% auto;\n  justify-content: space-between;\n\n\n  button {\n    display: inline-block;\n    font-size: min(max(10px, 2vw), 16px);\n  }\n  \n`;","import { useState, useEffect } from \"react\";\nimport Button, { BUTTON_TYPE_CLASSES } from \"../button/button.component\";\nimport FormInput from \"../form-input/form-input.component\";\nimport { SignInContainer, ButtonsContainer } from './sign-in-form.styles.jsx'\nimport { useNavigate } from 'react-router-dom'\nimport { emailSignInStart, googleSignInStart } from \"../../store/user/user.action\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentUser } from \"../../store/user/user.selector\";\n\nconst defaultFormFields = {\n    email: '',\n    password: ''\n}\n\nconst SignInForm = () => {\n\n    const dispatch = useDispatch();\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { email, password } = formFields;\n    const navigate = useNavigate();\n    const currentUser = useSelector(selectCurrentUser);\n\n    useEffect(() => {\n        if(currentUser){\n            navigate('/');\n        }\n      }, [currentUser, navigate]);\n    \n    const submitHandler = async (event) => {\n    event.preventDefault();\n        try {\n            dispatch(emailSignInStart(email, password));\n        } catch (error) {\n            console.log('user sign in failed', error);\n        }\n    };\n\n    const onChangeHandler = (event) => {\n        const { name, value } = event.target;\n        setFormFields({ ...formFields, [name]: value});\n    };\n\n    const signInWithGoogle = async () => {\n        dispatch(googleSignInStart());\n      };\n\n    return (\n        <SignInContainer>\n        <h2>I already have an account</h2>\n        <span>\n            Sign in with your email and password.\n        </span>\n        <form onSubmit={submitHandler}>\n            <FormInput label=\"Email\" type=\"email\" required onChange={onChangeHandler} name=\"email\" value={email}/>\n            <FormInput label=\"Password\" type=\"password\" required onChange={onChangeHandler} name=\"password\" value={password}/>\n            <ButtonsContainer>\n                <Button type=\"submit\" buttonType={BUTTON_TYPE_CLASSES.base}>Sign In</Button>\n                <Button type=\"button\" onClick={signInWithGoogle} buttonType={BUTTON_TYPE_CLASSES.google}>Google Sign In</Button>\n            </ButtonsContainer>\n        </form>\n    </SignInContainer>\n    )\n};\n\nexport default SignInForm;","import styled from 'styled-components'\n\nexport const SignContainer = styled.div`\n    display: grid;\n    justify-content: space-around;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    /* @media only screen \n    and (min-device-width : 200px) \n    and (max-device-width : 480px) {\n        width: 90%;\n  } */\n`;\n","// import { useEffect } from 'react';\n// import { getRedirectResult } from 'firebase/auth';\nimport SignUpForm from '../../components/sign-up-form/sign-up-form.component';\nimport SignInForm from '../../components/sign-in-form/sign-in-form.component';\nimport { SignContainer }from './authentication.styles.jsx'\n\nconst Authentication = () => {\n    // ## This piece of code is to use when using google redirect, maintain the user information with the reloading of the page##\n    // useEffect(async () => {\n    //     const response = await getRedirectResult(auth);\n    //     if(response){\n    //         const userDocRef = await crearUserDocumentFromAuth(response.user);\n    //     }\n    //     console.log(response);\n    // }, [])\n\n    return (\n        <SignContainer>\n            <SignInForm />\n            <SignUpForm />\n        </SignContainer>\n    );\n};\n\nexport default Authentication;","export const selectCurrentUser = (state) => state.user.currentUser;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["BUTTON_TYPE_CLASSES","base","google","inverted","children","buttonType","isLoading","otherProps","CustomButton","BaseButton","GoogleSignInButton","InvertedButton","getButton","disabled","styled","ButtonSpinner","SpinnerContainer","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","groupStyle","style","value","length","SignUpContainer","defaultFormFields","displayName","email","password","confirmPassword","useState","formFields","setFormFields","dispatch","useDispatch","handleSubmit","event","preventDefault","alert","signUpStart","error","console","log","handleChange","target","name","onSubmit","type","onChange","required","SignInContainer","ButtonsContainer","navigate","useNavigate","currentUser","useSelector","selectCurrentUser","useEffect","submitHandler","emailSignInStart","onChangeHandler","signInWithGoogle","googleSignInStart","onClick","SignContainer","state","user","_objectWithoutProperties","source","excluded","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}